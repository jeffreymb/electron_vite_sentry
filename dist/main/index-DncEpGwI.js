import { A as AWSECSLAUNCHTYPEVALUES_EC2, a as AWSECSLAUNCHTYPEVALUES_FARGATE, b as AwsEcsLaunchtypeValues, C as CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS, c as CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC, d as CLOUDPLATFORMVALUES_AWS_EC2, e as CLOUDPLATFORMVALUES_AWS_ECS, f as CLOUDPLATFORMVALUES_AWS_EKS, g as CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK, h as CLOUDPLATFORMVALUES_AWS_LAMBDA, i as CLOUDPLATFORMVALUES_AZURE_AKS, j as CLOUDPLATFORMVALUES_AZURE_APP_SERVICE, k as CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES, l as CLOUDPLATFORMVALUES_AZURE_FUNCTIONS, m as CLOUDPLATFORMVALUES_AZURE_VM, n as CLOUDPLATFORMVALUES_GCP_APP_ENGINE, o as CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS, p as CLOUDPLATFORMVALUES_GCP_CLOUD_RUN, q as CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE, r as CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE, s as CLOUDPROVIDERVALUES_ALIBABA_CLOUD, t as CLOUDPROVIDERVALUES_AWS, u as CLOUDPROVIDERVALUES_AZURE, v as CLOUDPROVIDERVALUES_GCP, w as CloudPlatformValues, x as CloudProviderValues, D as DBCASSANDRACONSISTENCYLEVELVALUES_ALL, y as DBCASSANDRACONSISTENCYLEVELVALUES_ANY, z as DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM, B as DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE, E as DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM, F as DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL, G as DBCASSANDRACONSISTENCYLEVELVALUES_ONE, H as DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM, I as DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL, J as DBCASSANDRACONSISTENCYLEVELVALUES_THREE, K as DBCASSANDRACONSISTENCYLEVELVALUES_TWO, L as DBSYSTEMVALUES_ADABAS, M as DBSYSTEMVALUES_CACHE, N as DBSYSTEMVALUES_CASSANDRA, O as DBSYSTEMVALUES_CLOUDSCAPE, P as DBSYSTEMVALUES_COCKROACHDB, Q as DBSYSTEMVALUES_COLDFUSION, R as DBSYSTEMVALUES_COSMOSDB, S as DBSYSTEMVALUES_COUCHBASE, T as DBSYSTEMVALUES_COUCHDB, U as DBSYSTEMVALUES_DB2, V as DBSYSTEMVALUES_DERBY, W as DBSYSTEMVALUES_DYNAMODB, X as DBSYSTEMVALUES_EDB, Y as DBSYSTEMVALUES_ELASTICSEARCH, Z as DBSYSTEMVALUES_FILEMAKER, _ as DBSYSTEMVALUES_FIREBIRD, $ as DBSYSTEMVALUES_FIRSTSQL, a0 as DBSYSTEMVALUES_GEODE, a1 as DBSYSTEMVALUES_H2, a2 as DBSYSTEMVALUES_HANADB, a3 as DBSYSTEMVALUES_HBASE, a4 as DBSYSTEMVALUES_HIVE, a5 as DBSYSTEMVALUES_HSQLDB, a6 as DBSYSTEMVALUES_INFORMIX, a7 as DBSYSTEMVALUES_INGRES, a8 as DBSYSTEMVALUES_INSTANTDB, a9 as DBSYSTEMVALUES_INTERBASE, aa as DBSYSTEMVALUES_MARIADB, ab as DBSYSTEMVALUES_MAXDB, ac as DBSYSTEMVALUES_MEMCACHED, ad as DBSYSTEMVALUES_MONGODB, ae as DBSYSTEMVALUES_MSSQL, af as DBSYSTEMVALUES_MYSQL, ag as DBSYSTEMVALUES_NEO4J, ah as DBSYSTEMVALUES_NETEZZA, ai as DBSYSTEMVALUES_ORACLE, aj as DBSYSTEMVALUES_OTHER_SQL, ak as DBSYSTEMVALUES_PERVASIVE, al as DBSYSTEMVALUES_POINTBASE, am as DBSYSTEMVALUES_POSTGRESQL, an as DBSYSTEMVALUES_PROGRESS, ao as DBSYSTEMVALUES_REDIS, ap as DBSYSTEMVALUES_REDSHIFT, aq as DBSYSTEMVALUES_SQLITE, ar as DBSYSTEMVALUES_SYBASE, as as DBSYSTEMVALUES_TERADATA, at as DBSYSTEMVALUES_VERTICA, au as DbCassandraConsistencyLevelValues, av as DbSystemValues, aw as FAASDOCUMENTOPERATIONVALUES_DELETE, ax as FAASDOCUMENTOPERATIONVALUES_EDIT, ay as FAASDOCUMENTOPERATIONVALUES_INSERT, az as FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD, aA as FAASINVOKEDPROVIDERVALUES_AWS, aB as FAASINVOKEDPROVIDERVALUES_AZURE, aC as FAASINVOKEDPROVIDERVALUES_GCP, aD as FAASTRIGGERVALUES_DATASOURCE, aE as FAASTRIGGERVALUES_HTTP, aF as FAASTRIGGERVALUES_OTHER, aG as FAASTRIGGERVALUES_PUBSUB, aH as FAASTRIGGERVALUES_TIMER, aI as FaasDocumentOperationValues, aJ as FaasInvokedProviderValues, aK as FaasTriggerValues, aL as HOSTARCHVALUES_AMD64, aM as HOSTARCHVALUES_ARM32, aN as HOSTARCHVALUES_ARM64, aO as HOSTARCHVALUES_IA64, aP as HOSTARCHVALUES_PPC32, aQ as HOSTARCHVALUES_PPC64, aR as HOSTARCHVALUES_X86, aS as HTTPFLAVORVALUES_HTTP_1_0, aT as HTTPFLAVORVALUES_HTTP_1_1, aU as HTTPFLAVORVALUES_HTTP_2_0, aV as HTTPFLAVORVALUES_QUIC, aW as HTTPFLAVORVALUES_SPDY, aX as HostArchValues, aY as HttpFlavorValues, aZ as MESSAGETYPEVALUES_RECEIVED, a_ as MESSAGETYPEVALUES_SENT, a$ as MESSAGINGDESTINATIONKINDVALUES_QUEUE, b0 as MESSAGINGDESTINATIONKINDVALUES_TOPIC, b1 as MESSAGINGOPERATIONVALUES_PROCESS, b2 as MESSAGINGOPERATIONVALUES_RECEIVE, b3 as MessageTypeValues, b4 as MessagingDestinationKindValues, b5 as MessagingOperationValues, b6 as NETHOSTCONNECTIONSUBTYPEVALUES_CDMA, b7 as NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT, b8 as NETHOSTCONNECTIONSUBTYPEVALUES_EDGE, b9 as NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD, ba as NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0, bb as NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A, bc as NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B, bd as NETHOSTCONNECTIONSUBTYPEVALUES_GPRS, be as NETHOSTCONNECTIONSUBTYPEVALUES_GSM, bf as NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA, bg as NETHOSTCONNECTIONSUBTYPEVALUES_HSPA, bh as NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP, bi as NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA, bj as NETHOSTCONNECTIONSUBTYPEVALUES_IDEN, bk as NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN, bl as NETHOSTCONNECTIONSUBTYPEVALUES_LTE, bm as NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA, bn as NETHOSTCONNECTIONSUBTYPEVALUES_NR, bo as NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA, bp as NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA, bq as NETHOSTCONNECTIONSUBTYPEVALUES_UMTS, br as NETHOSTCONNECTIONTYPEVALUES_CELL, bs as NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE, bt as NETHOSTCONNECTIONTYPEVALUES_UNKNOWN, bu as NETHOSTCONNECTIONTYPEVALUES_WIFI, bv as NETHOSTCONNECTIONTYPEVALUES_WIRED, bw as NETTRANSPORTVALUES_INPROC, bx as NETTRANSPORTVALUES_IP, by as NETTRANSPORTVALUES_IP_TCP, bz as NETTRANSPORTVALUES_IP_UDP, bA as NETTRANSPORTVALUES_OTHER, bB as NETTRANSPORTVALUES_PIPE, bC as NETTRANSPORTVALUES_UNIX, bD as NetHostConnectionSubtypeValues, bE as NetHostConnectionTypeValues, bF as NetTransportValues, bG as OSTYPEVALUES_AIX, bH as OSTYPEVALUES_DARWIN, bI as OSTYPEVALUES_DRAGONFLYBSD, bJ as OSTYPEVALUES_FREEBSD, bK as OSTYPEVALUES_HPUX, bL as OSTYPEVALUES_LINUX, bM as OSTYPEVALUES_NETBSD, bN as OSTYPEVALUES_OPENBSD, bO as OSTYPEVALUES_SOLARIS, bP as OSTYPEVALUES_WINDOWS, bQ as OSTYPEVALUES_Z_OS, bR as OsTypeValues, bS as RPCGRPCSTATUSCODEVALUES_ABORTED, bT as RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS, bU as RPCGRPCSTATUSCODEVALUES_CANCELLED, bV as RPCGRPCSTATUSCODEVALUES_DATA_LOSS, bW as RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED, bX as RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION, bY as RPCGRPCSTATUSCODEVALUES_INTERNAL, bZ as RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT, b_ as RPCGRPCSTATUSCODEVALUES_NOT_FOUND, b$ as RPCGRPCSTATUSCODEVALUES_OK, c0 as RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE, c1 as RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED, c2 as RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED, c3 as RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED, c4 as RPCGRPCSTATUSCODEVALUES_UNAVAILABLE, c5 as RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED, c6 as RPCGRPCSTATUSCODEVALUES_UNKNOWN, c7 as RpcGrpcStatusCodeValues, c8 as SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET, c9 as SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS, ca as SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ, cb as SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY, cc as SEMATTRS_AWS_DYNAMODB_COUNT, cd as SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE, ce as SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES, cf as SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES, cg as SEMATTRS_AWS_DYNAMODB_INDEX_NAME, ch as SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS, ci as SEMATTRS_AWS_DYNAMODB_LIMIT, cj as SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES, ck as SEMATTRS_AWS_DYNAMODB_PROJECTION, cl as SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY, cm as SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY, cn as SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT, co as SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD, cp as SEMATTRS_AWS_DYNAMODB_SEGMENT, cq as SEMATTRS_AWS_DYNAMODB_SELECT, cr as SEMATTRS_AWS_DYNAMODB_TABLE_COUNT, cs as SEMATTRS_AWS_DYNAMODB_TABLE_NAMES, ct as SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS, cu as SEMATTRS_AWS_LAMBDA_INVOKED_ARN, cv as SEMATTRS_CODE_FILEPATH, cw as SEMATTRS_CODE_FUNCTION, cx as SEMATTRS_CODE_LINENO, cy as SEMATTRS_CODE_NAMESPACE, cz as SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL, cA as SEMATTRS_DB_CASSANDRA_COORDINATOR_DC, cB as SEMATTRS_DB_CASSANDRA_COORDINATOR_ID, cC as SEMATTRS_DB_CASSANDRA_IDEMPOTENCE, cD as SEMATTRS_DB_CASSANDRA_KEYSPACE, cE as SEMATTRS_DB_CASSANDRA_PAGE_SIZE, cF as SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT, cG as SEMATTRS_DB_CASSANDRA_TABLE, cH as SEMATTRS_DB_CONNECTION_STRING, cI as SEMATTRS_DB_HBASE_NAMESPACE, cJ as SEMATTRS_DB_JDBC_DRIVER_CLASSNAME, cK as SEMATTRS_DB_MONGODB_COLLECTION, cL as SEMATTRS_DB_MSSQL_INSTANCE_NAME, cM as SEMATTRS_DB_NAME, cN as SEMATTRS_DB_OPERATION, cO as SEMATTRS_DB_REDIS_DATABASE_INDEX, cP as SEMATTRS_DB_SQL_TABLE, cQ as SEMATTRS_DB_STATEMENT, cR as SEMATTRS_DB_SYSTEM, cS as SEMATTRS_DB_USER, cT as SEMATTRS_ENDUSER_ID, cU as SEMATTRS_ENDUSER_ROLE, cV as SEMATTRS_ENDUSER_SCOPE, cW as SEMATTRS_EXCEPTION_ESCAPED, cX as SEMATTRS_EXCEPTION_MESSAGE, cY as SEMATTRS_EXCEPTION_STACKTRACE, cZ as SEMATTRS_EXCEPTION_TYPE, c_ as SEMATTRS_FAAS_COLDSTART, c$ as SEMATTRS_FAAS_CRON, d0 as SEMATTRS_FAAS_DOCUMENT_COLLECTION, d1 as SEMATTRS_FAAS_DOCUMENT_NAME, d2 as SEMATTRS_FAAS_DOCUMENT_OPERATION, d3 as SEMATTRS_FAAS_DOCUMENT_TIME, d4 as SEMATTRS_FAAS_EXECUTION, d5 as SEMATTRS_FAAS_INVOKED_NAME, d6 as SEMATTRS_FAAS_INVOKED_PROVIDER, d7 as SEMATTRS_FAAS_INVOKED_REGION, d8 as SEMATTRS_FAAS_TIME, d9 as SEMATTRS_FAAS_TRIGGER, da as SEMATTRS_HTTP_CLIENT_IP, db as SEMATTRS_HTTP_FLAVOR, dc as SEMATTRS_HTTP_HOST, dd as SEMATTRS_HTTP_METHOD, de as SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH, df as SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED, dg as SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH, dh as SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED, di as SEMATTRS_HTTP_ROUTE, dj as SEMATTRS_HTTP_SCHEME, dk as SEMATTRS_HTTP_SERVER_NAME, dl as SEMATTRS_HTTP_STATUS_CODE, dm as SEMATTRS_HTTP_TARGET, dn as SEMATTRS_HTTP_URL, dp as SEMATTRS_HTTP_USER_AGENT, dq as SEMATTRS_MESSAGE_COMPRESSED_SIZE, dr as SEMATTRS_MESSAGE_ID, ds as SEMATTRS_MESSAGE_TYPE, dt as SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE, du as SEMATTRS_MESSAGING_CONSUMER_ID, dv as SEMATTRS_MESSAGING_CONVERSATION_ID, dw as SEMATTRS_MESSAGING_DESTINATION, dx as SEMATTRS_MESSAGING_DESTINATION_KIND, dy as SEMATTRS_MESSAGING_KAFKA_CLIENT_ID, dz as SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP, dA as SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY, dB as SEMATTRS_MESSAGING_KAFKA_PARTITION, dC as SEMATTRS_MESSAGING_KAFKA_TOMBSTONE, dD as SEMATTRS_MESSAGING_MESSAGE_ID, dE as SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES, dF as SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES, dG as SEMATTRS_MESSAGING_OPERATION, dH as SEMATTRS_MESSAGING_PROTOCOL, dI as SEMATTRS_MESSAGING_PROTOCOL_VERSION, dJ as SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY, dK as SEMATTRS_MESSAGING_SYSTEM, dL as SEMATTRS_MESSAGING_TEMP_DESTINATION, dM as SEMATTRS_MESSAGING_URL, dN as SEMATTRS_NET_HOST_CARRIER_ICC, dO as SEMATTRS_NET_HOST_CARRIER_MCC, dP as SEMATTRS_NET_HOST_CARRIER_MNC, dQ as SEMATTRS_NET_HOST_CARRIER_NAME, dR as SEMATTRS_NET_HOST_CONNECTION_SUBTYPE, dS as SEMATTRS_NET_HOST_CONNECTION_TYPE, dT as SEMATTRS_NET_HOST_IP, dU as SEMATTRS_NET_HOST_NAME, dV as SEMATTRS_NET_HOST_PORT, dW as SEMATTRS_NET_PEER_IP, dX as SEMATTRS_NET_PEER_NAME, dY as SEMATTRS_NET_PEER_PORT, dZ as SEMATTRS_NET_TRANSPORT, d_ as SEMATTRS_PEER_SERVICE, d$ as SEMATTRS_RPC_GRPC_STATUS_CODE, e0 as SEMATTRS_RPC_JSONRPC_ERROR_CODE, e1 as SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE, e2 as SEMATTRS_RPC_JSONRPC_REQUEST_ID, e3 as SEMATTRS_RPC_JSONRPC_VERSION, e4 as SEMATTRS_RPC_METHOD, e5 as SEMATTRS_RPC_SERVICE, e6 as SEMATTRS_RPC_SYSTEM, e7 as SEMATTRS_THREAD_ID, e8 as SEMATTRS_THREAD_NAME, e9 as SEMRESATTRS_AWS_ECS_CLUSTER_ARN, ea as SEMRESATTRS_AWS_ECS_CONTAINER_ARN, eb as SEMRESATTRS_AWS_ECS_LAUNCHTYPE, ec as SEMRESATTRS_AWS_ECS_TASK_ARN, ed as SEMRESATTRS_AWS_ECS_TASK_FAMILY, ee as SEMRESATTRS_AWS_ECS_TASK_REVISION, ef as SEMRESATTRS_AWS_EKS_CLUSTER_ARN, eg as SEMRESATTRS_AWS_LOG_GROUP_ARNS, eh as SEMRESATTRS_AWS_LOG_GROUP_NAMES, ei as SEMRESATTRS_AWS_LOG_STREAM_ARNS, ej as SEMRESATTRS_AWS_LOG_STREAM_NAMES, ek as SEMRESATTRS_CLOUD_ACCOUNT_ID, el as SEMRESATTRS_CLOUD_AVAILABILITY_ZONE, em as SEMRESATTRS_CLOUD_PLATFORM, en as SEMRESATTRS_CLOUD_PROVIDER, eo as SEMRESATTRS_CLOUD_REGION, ep as SEMRESATTRS_CONTAINER_ID, eq as SEMRESATTRS_CONTAINER_IMAGE_NAME, er as SEMRESATTRS_CONTAINER_IMAGE_TAG, es as SEMRESATTRS_CONTAINER_NAME, et as SEMRESATTRS_CONTAINER_RUNTIME, eu as SEMRESATTRS_DEPLOYMENT_ENVIRONMENT, ev as SEMRESATTRS_DEVICE_ID, ew as SEMRESATTRS_DEVICE_MODEL_IDENTIFIER, ex as SEMRESATTRS_DEVICE_MODEL_NAME, ey as SEMRESATTRS_FAAS_ID, ez as SEMRESATTRS_FAAS_INSTANCE, eA as SEMRESATTRS_FAAS_MAX_MEMORY, eB as SEMRESATTRS_FAAS_NAME, eC as SEMRESATTRS_FAAS_VERSION, eD as SEMRESATTRS_HOST_ARCH, eE as SEMRESATTRS_HOST_ID, eF as SEMRESATTRS_HOST_IMAGE_ID, eG as SEMRESATTRS_HOST_IMAGE_NAME, eH as SEMRESATTRS_HOST_IMAGE_VERSION, eI as SEMRESATTRS_HOST_NAME, eJ as SEMRESATTRS_HOST_TYPE, eK as SEMRESATTRS_K8S_CLUSTER_NAME, eL as SEMRESATTRS_K8S_CONTAINER_NAME, eM as SEMRESATTRS_K8S_CRONJOB_NAME, eN as SEMRESATTRS_K8S_CRONJOB_UID, eO as SEMRESATTRS_K8S_DAEMONSET_NAME, eP as SEMRESATTRS_K8S_DAEMONSET_UID, eQ as SEMRESATTRS_K8S_DEPLOYMENT_NAME, eR as SEMRESATTRS_K8S_DEPLOYMENT_UID, eS as SEMRESATTRS_K8S_JOB_NAME, eT as SEMRESATTRS_K8S_JOB_UID, eU as SEMRESATTRS_K8S_NAMESPACE_NAME, eV as SEMRESATTRS_K8S_NODE_NAME, eW as SEMRESATTRS_K8S_NODE_UID, eX as SEMRESATTRS_K8S_POD_NAME, eY as SEMRESATTRS_K8S_POD_UID, eZ as SEMRESATTRS_K8S_REPLICASET_NAME, e_ as SEMRESATTRS_K8S_REPLICASET_UID, e$ as SEMRESATTRS_K8S_STATEFULSET_NAME, f0 as SEMRESATTRS_K8S_STATEFULSET_UID, f1 as SEMRESATTRS_OS_DESCRIPTION, f2 as SEMRESATTRS_OS_NAME, f3 as SEMRESATTRS_OS_TYPE, f4 as SEMRESATTRS_OS_VERSION, f5 as SEMRESATTRS_PROCESS_COMMAND, f6 as SEMRESATTRS_PROCESS_COMMAND_ARGS, f7 as SEMRESATTRS_PROCESS_COMMAND_LINE, f8 as SEMRESATTRS_PROCESS_EXECUTABLE_NAME, f9 as SEMRESATTRS_PROCESS_EXECUTABLE_PATH, fa as SEMRESATTRS_PROCESS_OWNER, fb as SEMRESATTRS_PROCESS_PID, fc as SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION, fd as SEMRESATTRS_PROCESS_RUNTIME_NAME, fe as SEMRESATTRS_PROCESS_RUNTIME_VERSION, ff as SEMRESATTRS_SERVICE_INSTANCE_ID, fg as SEMRESATTRS_SERVICE_NAME, fh as SEMRESATTRS_SERVICE_NAMESPACE, fi as SEMRESATTRS_SERVICE_VERSION, fj as SEMRESATTRS_TELEMETRY_AUTO_VERSION, fk as SEMRESATTRS_TELEMETRY_SDK_LANGUAGE, fl as SEMRESATTRS_TELEMETRY_SDK_NAME, fm as SEMRESATTRS_TELEMETRY_SDK_VERSION, fn as SEMRESATTRS_WEBENGINE_DESCRIPTION, fo as SEMRESATTRS_WEBENGINE_NAME, fp as SEMRESATTRS_WEBENGINE_VERSION, fq as SemanticAttributes, fr as SemanticResourceAttributes, fs as TELEMETRYSDKLANGUAGEVALUES_CPP, ft as TELEMETRYSDKLANGUAGEVALUES_DOTNET, fu as TELEMETRYSDKLANGUAGEVALUES_ERLANG, fv as TELEMETRYSDKLANGUAGEVALUES_GO, fw as TELEMETRYSDKLANGUAGEVALUES_JAVA, fx as TELEMETRYSDKLANGUAGEVALUES_NODEJS, fy as TELEMETRYSDKLANGUAGEVALUES_PHP, fz as TELEMETRYSDKLANGUAGEVALUES_PYTHON, fA as TELEMETRYSDKLANGUAGEVALUES_RUBY, fB as TELEMETRYSDKLANGUAGEVALUES_WEBJS, fC as TelemetrySdkLanguageValues, fD as getAugmentedNamespace, fE as commonjsGlobal, fF as require$$2 } from "./index.js";
import require$$0 from "node:diagnostics_channel";
function _mergeNamespaces(n, m) {
  for (var i = 0; i < m.length; i++) {
    const e = m[i];
    if (typeof e !== "string" && !Array.isArray(e)) {
      for (const k in e) {
        if (k !== "default" && !(k in n)) {
          const d = Object.getOwnPropertyDescriptor(e, k);
          if (d) {
            Object.defineProperty(n, k, d.get ? d : {
              enumerable: true,
              get: () => e[k]
            });
          }
        }
      }
    }
  }
  return Object.freeze(Object.defineProperty(n, Symbol.toStringTag, { value: "Module" }));
}
var ATTR_ASPNETCORE_RATE_LIMITING_RESULT = "aspnetcore.rate_limiting.result";
var ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ACQUIRED = "acquired";
var ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ENDPOINT_LIMITER = "endpoint_limiter";
var ASPNETCORE_RATE_LIMITING_RESULT_VALUE_GLOBAL_LIMITER = "global_limiter";
var ASPNETCORE_RATE_LIMITING_RESULT_VALUE_REQUEST_CANCELED = "request_canceled";
var ATTR_TELEMETRY_SDK_LANGUAGE = "telemetry.sdk.language";
var TELEMETRY_SDK_LANGUAGE_VALUE_CPP = "cpp";
var TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET = "dotnet";
var TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG = "erlang";
var TELEMETRY_SDK_LANGUAGE_VALUE_GO = "go";
var TELEMETRY_SDK_LANGUAGE_VALUE_JAVA = "java";
var TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS = "nodejs";
var TELEMETRY_SDK_LANGUAGE_VALUE_PHP = "php";
var TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON = "python";
var TELEMETRY_SDK_LANGUAGE_VALUE_RUBY = "ruby";
var TELEMETRY_SDK_LANGUAGE_VALUE_RUST = "rust";
var TELEMETRY_SDK_LANGUAGE_VALUE_SWIFT = "swift";
var TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS = "webjs";
var ATTR_TELEMETRY_SDK_NAME = "telemetry.sdk.name";
var ATTR_TELEMETRY_SDK_VERSION = "telemetry.sdk.version";
var ATTR_ASPNETCORE_DIAGNOSTICS_HANDLER_TYPE = "aspnetcore.diagnostics.handler.type";
var ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT = "aspnetcore.diagnostics.exception.result";
var ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_ABORTED = "aborted";
var ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_HANDLED = "handled";
var ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_SKIPPED = "skipped";
var ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_UNHANDLED = "unhandled";
var ATTR_ASPNETCORE_RATE_LIMITING_POLICY = "aspnetcore.rate_limiting.policy";
var ATTR_ASPNETCORE_REQUEST_IS_UNHANDLED = "aspnetcore.request.is_unhandled";
var ATTR_ASPNETCORE_ROUTING_IS_FALLBACK = "aspnetcore.routing.is_fallback";
var ATTR_ASPNETCORE_ROUTING_MATCH_STATUS = "aspnetcore.routing.match_status";
var ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_FAILURE = "failure";
var ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_SUCCESS = "success";
var ATTR_CLIENT_ADDRESS = "client.address";
var ATTR_CLIENT_PORT = "client.port";
var ATTR_ERROR_TYPE = "error.type";
var ERROR_TYPE_VALUE_OTHER = "_OTHER";
var ATTR_EXCEPTION_ESCAPED = "exception.escaped";
var ATTR_EXCEPTION_MESSAGE = "exception.message";
var ATTR_EXCEPTION_STACKTRACE = "exception.stacktrace";
var ATTR_EXCEPTION_TYPE = "exception.type";
var ATTR_HTTP_REQUEST_HEADER = function(key) {
  return "http.request.header." + key;
};
var ATTR_HTTP_REQUEST_METHOD = "http.request.method";
var HTTP_REQUEST_METHOD_VALUE_OTHER = "_OTHER";
var HTTP_REQUEST_METHOD_VALUE_CONNECT = "CONNECT";
var HTTP_REQUEST_METHOD_VALUE_DELETE = "DELETE";
var HTTP_REQUEST_METHOD_VALUE_GET = "GET";
var HTTP_REQUEST_METHOD_VALUE_HEAD = "HEAD";
var HTTP_REQUEST_METHOD_VALUE_OPTIONS = "OPTIONS";
var HTTP_REQUEST_METHOD_VALUE_PATCH = "PATCH";
var HTTP_REQUEST_METHOD_VALUE_POST = "POST";
var HTTP_REQUEST_METHOD_VALUE_PUT = "PUT";
var HTTP_REQUEST_METHOD_VALUE_TRACE = "TRACE";
var ATTR_HTTP_REQUEST_METHOD_ORIGINAL = "http.request.method_original";
var ATTR_HTTP_REQUEST_RESEND_COUNT = "http.request.resend_count";
var ATTR_HTTP_RESPONSE_HEADER = function(key) {
  return "http.response.header." + key;
};
var ATTR_HTTP_RESPONSE_STATUS_CODE = "http.response.status_code";
var ATTR_HTTP_ROUTE = "http.route";
var ATTR_JVM_GC_ACTION = "jvm.gc.action";
var ATTR_JVM_GC_NAME = "jvm.gc.name";
var ATTR_JVM_MEMORY_POOL_NAME = "jvm.memory.pool.name";
var ATTR_JVM_MEMORY_TYPE = "jvm.memory.type";
var JVM_MEMORY_TYPE_VALUE_HEAP = "heap";
var JVM_MEMORY_TYPE_VALUE_NON_HEAP = "non_heap";
var ATTR_JVM_THREAD_DAEMON = "jvm.thread.daemon";
var ATTR_JVM_THREAD_STATE = "jvm.thread.state";
var JVM_THREAD_STATE_VALUE_BLOCKED = "blocked";
var JVM_THREAD_STATE_VALUE_NEW = "new";
var JVM_THREAD_STATE_VALUE_RUNNABLE = "runnable";
var JVM_THREAD_STATE_VALUE_TERMINATED = "terminated";
var JVM_THREAD_STATE_VALUE_TIMED_WAITING = "timed_waiting";
var JVM_THREAD_STATE_VALUE_WAITING = "waiting";
var ATTR_NETWORK_LOCAL_ADDRESS = "network.local.address";
var ATTR_NETWORK_LOCAL_PORT = "network.local.port";
var ATTR_NETWORK_PEER_ADDRESS = "network.peer.address";
var ATTR_NETWORK_PEER_PORT = "network.peer.port";
var ATTR_NETWORK_PROTOCOL_NAME = "network.protocol.name";
var ATTR_NETWORK_PROTOCOL_VERSION = "network.protocol.version";
var ATTR_NETWORK_TRANSPORT = "network.transport";
var NETWORK_TRANSPORT_VALUE_PIPE = "pipe";
var NETWORK_TRANSPORT_VALUE_QUIC = "quic";
var NETWORK_TRANSPORT_VALUE_TCP = "tcp";
var NETWORK_TRANSPORT_VALUE_UDP = "udp";
var NETWORK_TRANSPORT_VALUE_UNIX = "unix";
var ATTR_NETWORK_TYPE = "network.type";
var NETWORK_TYPE_VALUE_IPV4 = "ipv4";
var NETWORK_TYPE_VALUE_IPV6 = "ipv6";
var ATTR_OTEL_SCOPE_NAME = "otel.scope.name";
var ATTR_OTEL_SCOPE_VERSION = "otel.scope.version";
var ATTR_OTEL_STATUS_CODE = "otel.status_code";
var OTEL_STATUS_CODE_VALUE_ERROR = "ERROR";
var OTEL_STATUS_CODE_VALUE_OK = "OK";
var ATTR_OTEL_STATUS_DESCRIPTION = "otel.status_description";
var ATTR_SERVER_ADDRESS = "server.address";
var ATTR_SERVER_PORT = "server.port";
var ATTR_SERVICE_NAME = "service.name";
var ATTR_SERVICE_VERSION = "service.version";
var ATTR_SIGNALR_CONNECTION_STATUS = "signalr.connection.status";
var SIGNALR_CONNECTION_STATUS_VALUE_APP_SHUTDOWN = "app_shutdown";
var SIGNALR_CONNECTION_STATUS_VALUE_NORMAL_CLOSURE = "normal_closure";
var SIGNALR_CONNECTION_STATUS_VALUE_TIMEOUT = "timeout";
var ATTR_SIGNALR_TRANSPORT = "signalr.transport";
var SIGNALR_TRANSPORT_VALUE_LONG_POLLING = "long_polling";
var SIGNALR_TRANSPORT_VALUE_SERVER_SENT_EVENTS = "server_sent_events";
var SIGNALR_TRANSPORT_VALUE_WEB_SOCKETS = "web_sockets";
var ATTR_URL_FRAGMENT = "url.fragment";
var ATTR_URL_FULL = "url.full";
var ATTR_URL_PATH = "url.path";
var ATTR_URL_QUERY = "url.query";
var ATTR_URL_SCHEME = "url.scheme";
var ATTR_USER_AGENT_ORIGINAL = "user_agent.original";
var METRIC_ASPNETCORE_DIAGNOSTICS_EXCEPTIONS = "aspnetcore.diagnostics.exceptions";
var METRIC_ASPNETCORE_RATE_LIMITING_ACTIVE_REQUEST_LEASES = "aspnetcore.rate_limiting.active_request_leases";
var METRIC_ASPNETCORE_RATE_LIMITING_QUEUED_REQUESTS = "aspnetcore.rate_limiting.queued_requests";
var METRIC_ASPNETCORE_RATE_LIMITING_REQUEST_TIME_IN_QUEUE = "aspnetcore.rate_limiting.request.time_in_queue";
var METRIC_ASPNETCORE_RATE_LIMITING_REQUEST_LEASE_DURATION = "aspnetcore.rate_limiting.request_lease.duration";
var METRIC_ASPNETCORE_RATE_LIMITING_REQUESTS = "aspnetcore.rate_limiting.requests";
var METRIC_ASPNETCORE_ROUTING_MATCH_ATTEMPTS = "aspnetcore.routing.match_attempts";
var METRIC_HTTP_CLIENT_REQUEST_DURATION = "http.client.request.duration";
var METRIC_HTTP_SERVER_REQUEST_DURATION = "http.server.request.duration";
var METRIC_JVM_CLASS_COUNT = "jvm.class.count";
var METRIC_JVM_CLASS_LOADED = "jvm.class.loaded";
var METRIC_JVM_CLASS_UNLOADED = "jvm.class.unloaded";
var METRIC_JVM_CPU_COUNT = "jvm.cpu.count";
var METRIC_JVM_CPU_RECENT_UTILIZATION = "jvm.cpu.recent_utilization";
var METRIC_JVM_CPU_TIME = "jvm.cpu.time";
var METRIC_JVM_GC_DURATION = "jvm.gc.duration";
var METRIC_JVM_MEMORY_COMMITTED = "jvm.memory.committed";
var METRIC_JVM_MEMORY_LIMIT = "jvm.memory.limit";
var METRIC_JVM_MEMORY_USED = "jvm.memory.used";
var METRIC_JVM_MEMORY_USED_AFTER_LAST_GC = "jvm.memory.used_after_last_gc";
var METRIC_JVM_THREAD_COUNT = "jvm.thread.count";
var METRIC_KESTREL_ACTIVE_CONNECTIONS = "kestrel.active_connections";
var METRIC_KESTREL_ACTIVE_TLS_HANDSHAKES = "kestrel.active_tls_handshakes";
var METRIC_KESTREL_CONNECTION_DURATION = "kestrel.connection.duration";
var METRIC_KESTREL_QUEUED_CONNECTIONS = "kestrel.queued_connections";
var METRIC_KESTREL_QUEUED_REQUESTS = "kestrel.queued_requests";
var METRIC_KESTREL_REJECTED_CONNECTIONS = "kestrel.rejected_connections";
var METRIC_KESTREL_TLS_HANDSHAKE_DURATION = "kestrel.tls_handshake.duration";
var METRIC_KESTREL_UPGRADED_CONNECTIONS = "kestrel.upgraded_connections";
var METRIC_SIGNALR_SERVER_ACTIVE_CONNECTIONS = "signalr.server.active_connections";
var METRIC_SIGNALR_SERVER_CONNECTION_DURATION = "signalr.server.connection.duration";
const esm = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_ABORTED,
  ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_HANDLED,
  ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_SKIPPED,
  ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_UNHANDLED,
  ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ACQUIRED,
  ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ENDPOINT_LIMITER,
  ASPNETCORE_RATE_LIMITING_RESULT_VALUE_GLOBAL_LIMITER,
  ASPNETCORE_RATE_LIMITING_RESULT_VALUE_REQUEST_CANCELED,
  ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_FAILURE,
  ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_SUCCESS,
  ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT,
  ATTR_ASPNETCORE_DIAGNOSTICS_HANDLER_TYPE,
  ATTR_ASPNETCORE_RATE_LIMITING_POLICY,
  ATTR_ASPNETCORE_RATE_LIMITING_RESULT,
  ATTR_ASPNETCORE_REQUEST_IS_UNHANDLED,
  ATTR_ASPNETCORE_ROUTING_IS_FALLBACK,
  ATTR_ASPNETCORE_ROUTING_MATCH_STATUS,
  ATTR_CLIENT_ADDRESS,
  ATTR_CLIENT_PORT,
  ATTR_ERROR_TYPE,
  ATTR_EXCEPTION_ESCAPED,
  ATTR_EXCEPTION_MESSAGE,
  ATTR_EXCEPTION_STACKTRACE,
  ATTR_EXCEPTION_TYPE,
  ATTR_HTTP_REQUEST_HEADER,
  ATTR_HTTP_REQUEST_METHOD,
  ATTR_HTTP_REQUEST_METHOD_ORIGINAL,
  ATTR_HTTP_REQUEST_RESEND_COUNT,
  ATTR_HTTP_RESPONSE_HEADER,
  ATTR_HTTP_RESPONSE_STATUS_CODE,
  ATTR_HTTP_ROUTE,
  ATTR_JVM_GC_ACTION,
  ATTR_JVM_GC_NAME,
  ATTR_JVM_MEMORY_POOL_NAME,
  ATTR_JVM_MEMORY_TYPE,
  ATTR_JVM_THREAD_DAEMON,
  ATTR_JVM_THREAD_STATE,
  ATTR_NETWORK_LOCAL_ADDRESS,
  ATTR_NETWORK_LOCAL_PORT,
  ATTR_NETWORK_PEER_ADDRESS,
  ATTR_NETWORK_PEER_PORT,
  ATTR_NETWORK_PROTOCOL_NAME,
  ATTR_NETWORK_PROTOCOL_VERSION,
  ATTR_NETWORK_TRANSPORT,
  ATTR_NETWORK_TYPE,
  ATTR_OTEL_SCOPE_NAME,
  ATTR_OTEL_SCOPE_VERSION,
  ATTR_OTEL_STATUS_CODE,
  ATTR_OTEL_STATUS_DESCRIPTION,
  ATTR_SERVER_ADDRESS,
  ATTR_SERVER_PORT,
  ATTR_SERVICE_NAME,
  ATTR_SERVICE_VERSION,
  ATTR_SIGNALR_CONNECTION_STATUS,
  ATTR_SIGNALR_TRANSPORT,
  ATTR_TELEMETRY_SDK_LANGUAGE,
  ATTR_TELEMETRY_SDK_NAME,
  ATTR_TELEMETRY_SDK_VERSION,
  ATTR_URL_FRAGMENT,
  ATTR_URL_FULL,
  ATTR_URL_PATH,
  ATTR_URL_QUERY,
  ATTR_URL_SCHEME,
  ATTR_USER_AGENT_ORIGINAL,
  AWSECSLAUNCHTYPEVALUES_EC2,
  AWSECSLAUNCHTYPEVALUES_FARGATE,
  AwsEcsLaunchtypeValues,
  CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS,
  CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC,
  CLOUDPLATFORMVALUES_AWS_EC2,
  CLOUDPLATFORMVALUES_AWS_ECS,
  CLOUDPLATFORMVALUES_AWS_EKS,
  CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK,
  CLOUDPLATFORMVALUES_AWS_LAMBDA,
  CLOUDPLATFORMVALUES_AZURE_AKS,
  CLOUDPLATFORMVALUES_AZURE_APP_SERVICE,
  CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES,
  CLOUDPLATFORMVALUES_AZURE_FUNCTIONS,
  CLOUDPLATFORMVALUES_AZURE_VM,
  CLOUDPLATFORMVALUES_GCP_APP_ENGINE,
  CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS,
  CLOUDPLATFORMVALUES_GCP_CLOUD_RUN,
  CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE,
  CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE,
  CLOUDPROVIDERVALUES_ALIBABA_CLOUD,
  CLOUDPROVIDERVALUES_AWS,
  CLOUDPROVIDERVALUES_AZURE,
  CLOUDPROVIDERVALUES_GCP,
  CloudPlatformValues,
  CloudProviderValues,
  DBCASSANDRACONSISTENCYLEVELVALUES_ALL,
  DBCASSANDRACONSISTENCYLEVELVALUES_ANY,
  DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM,
  DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE,
  DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM,
  DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL,
  DBCASSANDRACONSISTENCYLEVELVALUES_ONE,
  DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM,
  DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL,
  DBCASSANDRACONSISTENCYLEVELVALUES_THREE,
  DBCASSANDRACONSISTENCYLEVELVALUES_TWO,
  DBSYSTEMVALUES_ADABAS,
  DBSYSTEMVALUES_CACHE,
  DBSYSTEMVALUES_CASSANDRA,
  DBSYSTEMVALUES_CLOUDSCAPE,
  DBSYSTEMVALUES_COCKROACHDB,
  DBSYSTEMVALUES_COLDFUSION,
  DBSYSTEMVALUES_COSMOSDB,
  DBSYSTEMVALUES_COUCHBASE,
  DBSYSTEMVALUES_COUCHDB,
  DBSYSTEMVALUES_DB2,
  DBSYSTEMVALUES_DERBY,
  DBSYSTEMVALUES_DYNAMODB,
  DBSYSTEMVALUES_EDB,
  DBSYSTEMVALUES_ELASTICSEARCH,
  DBSYSTEMVALUES_FILEMAKER,
  DBSYSTEMVALUES_FIREBIRD,
  DBSYSTEMVALUES_FIRSTSQL,
  DBSYSTEMVALUES_GEODE,
  DBSYSTEMVALUES_H2,
  DBSYSTEMVALUES_HANADB,
  DBSYSTEMVALUES_HBASE,
  DBSYSTEMVALUES_HIVE,
  DBSYSTEMVALUES_HSQLDB,
  DBSYSTEMVALUES_INFORMIX,
  DBSYSTEMVALUES_INGRES,
  DBSYSTEMVALUES_INSTANTDB,
  DBSYSTEMVALUES_INTERBASE,
  DBSYSTEMVALUES_MARIADB,
  DBSYSTEMVALUES_MAXDB,
  DBSYSTEMVALUES_MEMCACHED,
  DBSYSTEMVALUES_MONGODB,
  DBSYSTEMVALUES_MSSQL,
  DBSYSTEMVALUES_MYSQL,
  DBSYSTEMVALUES_NEO4J,
  DBSYSTEMVALUES_NETEZZA,
  DBSYSTEMVALUES_ORACLE,
  DBSYSTEMVALUES_OTHER_SQL,
  DBSYSTEMVALUES_PERVASIVE,
  DBSYSTEMVALUES_POINTBASE,
  DBSYSTEMVALUES_POSTGRESQL,
  DBSYSTEMVALUES_PROGRESS,
  DBSYSTEMVALUES_REDIS,
  DBSYSTEMVALUES_REDSHIFT,
  DBSYSTEMVALUES_SQLITE,
  DBSYSTEMVALUES_SYBASE,
  DBSYSTEMVALUES_TERADATA,
  DBSYSTEMVALUES_VERTICA,
  DbCassandraConsistencyLevelValues,
  DbSystemValues,
  ERROR_TYPE_VALUE_OTHER,
  FAASDOCUMENTOPERATIONVALUES_DELETE,
  FAASDOCUMENTOPERATIONVALUES_EDIT,
  FAASDOCUMENTOPERATIONVALUES_INSERT,
  FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD,
  FAASINVOKEDPROVIDERVALUES_AWS,
  FAASINVOKEDPROVIDERVALUES_AZURE,
  FAASINVOKEDPROVIDERVALUES_GCP,
  FAASTRIGGERVALUES_DATASOURCE,
  FAASTRIGGERVALUES_HTTP,
  FAASTRIGGERVALUES_OTHER,
  FAASTRIGGERVALUES_PUBSUB,
  FAASTRIGGERVALUES_TIMER,
  FaasDocumentOperationValues,
  FaasInvokedProviderValues,
  FaasTriggerValues,
  HOSTARCHVALUES_AMD64,
  HOSTARCHVALUES_ARM32,
  HOSTARCHVALUES_ARM64,
  HOSTARCHVALUES_IA64,
  HOSTARCHVALUES_PPC32,
  HOSTARCHVALUES_PPC64,
  HOSTARCHVALUES_X86,
  HTTPFLAVORVALUES_HTTP_1_0,
  HTTPFLAVORVALUES_HTTP_1_1,
  HTTPFLAVORVALUES_HTTP_2_0,
  HTTPFLAVORVALUES_QUIC,
  HTTPFLAVORVALUES_SPDY,
  HTTP_REQUEST_METHOD_VALUE_CONNECT,
  HTTP_REQUEST_METHOD_VALUE_DELETE,
  HTTP_REQUEST_METHOD_VALUE_GET,
  HTTP_REQUEST_METHOD_VALUE_HEAD,
  HTTP_REQUEST_METHOD_VALUE_OPTIONS,
  HTTP_REQUEST_METHOD_VALUE_OTHER,
  HTTP_REQUEST_METHOD_VALUE_PATCH,
  HTTP_REQUEST_METHOD_VALUE_POST,
  HTTP_REQUEST_METHOD_VALUE_PUT,
  HTTP_REQUEST_METHOD_VALUE_TRACE,
  HostArchValues,
  HttpFlavorValues,
  JVM_MEMORY_TYPE_VALUE_HEAP,
  JVM_MEMORY_TYPE_VALUE_NON_HEAP,
  JVM_THREAD_STATE_VALUE_BLOCKED,
  JVM_THREAD_STATE_VALUE_NEW,
  JVM_THREAD_STATE_VALUE_RUNNABLE,
  JVM_THREAD_STATE_VALUE_TERMINATED,
  JVM_THREAD_STATE_VALUE_TIMED_WAITING,
  JVM_THREAD_STATE_VALUE_WAITING,
  MESSAGETYPEVALUES_RECEIVED,
  MESSAGETYPEVALUES_SENT,
  MESSAGINGDESTINATIONKINDVALUES_QUEUE,
  MESSAGINGDESTINATIONKINDVALUES_TOPIC,
  MESSAGINGOPERATIONVALUES_PROCESS,
  MESSAGINGOPERATIONVALUES_RECEIVE,
  METRIC_ASPNETCORE_DIAGNOSTICS_EXCEPTIONS,
  METRIC_ASPNETCORE_RATE_LIMITING_ACTIVE_REQUEST_LEASES,
  METRIC_ASPNETCORE_RATE_LIMITING_QUEUED_REQUESTS,
  METRIC_ASPNETCORE_RATE_LIMITING_REQUESTS,
  METRIC_ASPNETCORE_RATE_LIMITING_REQUEST_LEASE_DURATION,
  METRIC_ASPNETCORE_RATE_LIMITING_REQUEST_TIME_IN_QUEUE,
  METRIC_ASPNETCORE_ROUTING_MATCH_ATTEMPTS,
  METRIC_HTTP_CLIENT_REQUEST_DURATION,
  METRIC_HTTP_SERVER_REQUEST_DURATION,
  METRIC_JVM_CLASS_COUNT,
  METRIC_JVM_CLASS_LOADED,
  METRIC_JVM_CLASS_UNLOADED,
  METRIC_JVM_CPU_COUNT,
  METRIC_JVM_CPU_RECENT_UTILIZATION,
  METRIC_JVM_CPU_TIME,
  METRIC_JVM_GC_DURATION,
  METRIC_JVM_MEMORY_COMMITTED,
  METRIC_JVM_MEMORY_LIMIT,
  METRIC_JVM_MEMORY_USED,
  METRIC_JVM_MEMORY_USED_AFTER_LAST_GC,
  METRIC_JVM_THREAD_COUNT,
  METRIC_KESTREL_ACTIVE_CONNECTIONS,
  METRIC_KESTREL_ACTIVE_TLS_HANDSHAKES,
  METRIC_KESTREL_CONNECTION_DURATION,
  METRIC_KESTREL_QUEUED_CONNECTIONS,
  METRIC_KESTREL_QUEUED_REQUESTS,
  METRIC_KESTREL_REJECTED_CONNECTIONS,
  METRIC_KESTREL_TLS_HANDSHAKE_DURATION,
  METRIC_KESTREL_UPGRADED_CONNECTIONS,
  METRIC_SIGNALR_SERVER_ACTIVE_CONNECTIONS,
  METRIC_SIGNALR_SERVER_CONNECTION_DURATION,
  MessageTypeValues,
  MessagingDestinationKindValues,
  MessagingOperationValues,
  NETHOSTCONNECTIONSUBTYPEVALUES_CDMA,
  NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT,
  NETHOSTCONNECTIONSUBTYPEVALUES_EDGE,
  NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD,
  NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0,
  NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A,
  NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B,
  NETHOSTCONNECTIONSUBTYPEVALUES_GPRS,
  NETHOSTCONNECTIONSUBTYPEVALUES_GSM,
  NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA,
  NETHOSTCONNECTIONSUBTYPEVALUES_HSPA,
  NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP,
  NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA,
  NETHOSTCONNECTIONSUBTYPEVALUES_IDEN,
  NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN,
  NETHOSTCONNECTIONSUBTYPEVALUES_LTE,
  NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA,
  NETHOSTCONNECTIONSUBTYPEVALUES_NR,
  NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA,
  NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA,
  NETHOSTCONNECTIONSUBTYPEVALUES_UMTS,
  NETHOSTCONNECTIONTYPEVALUES_CELL,
  NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE,
  NETHOSTCONNECTIONTYPEVALUES_UNKNOWN,
  NETHOSTCONNECTIONTYPEVALUES_WIFI,
  NETHOSTCONNECTIONTYPEVALUES_WIRED,
  NETTRANSPORTVALUES_INPROC,
  NETTRANSPORTVALUES_IP,
  NETTRANSPORTVALUES_IP_TCP,
  NETTRANSPORTVALUES_IP_UDP,
  NETTRANSPORTVALUES_OTHER,
  NETTRANSPORTVALUES_PIPE,
  NETTRANSPORTVALUES_UNIX,
  NETWORK_TRANSPORT_VALUE_PIPE,
  NETWORK_TRANSPORT_VALUE_QUIC,
  NETWORK_TRANSPORT_VALUE_TCP,
  NETWORK_TRANSPORT_VALUE_UDP,
  NETWORK_TRANSPORT_VALUE_UNIX,
  NETWORK_TYPE_VALUE_IPV4,
  NETWORK_TYPE_VALUE_IPV6,
  NetHostConnectionSubtypeValues,
  NetHostConnectionTypeValues,
  NetTransportValues,
  OSTYPEVALUES_AIX,
  OSTYPEVALUES_DARWIN,
  OSTYPEVALUES_DRAGONFLYBSD,
  OSTYPEVALUES_FREEBSD,
  OSTYPEVALUES_HPUX,
  OSTYPEVALUES_LINUX,
  OSTYPEVALUES_NETBSD,
  OSTYPEVALUES_OPENBSD,
  OSTYPEVALUES_SOLARIS,
  OSTYPEVALUES_WINDOWS,
  OSTYPEVALUES_Z_OS,
  OTEL_STATUS_CODE_VALUE_ERROR,
  OTEL_STATUS_CODE_VALUE_OK,
  OsTypeValues,
  RPCGRPCSTATUSCODEVALUES_ABORTED,
  RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS,
  RPCGRPCSTATUSCODEVALUES_CANCELLED,
  RPCGRPCSTATUSCODEVALUES_DATA_LOSS,
  RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED,
  RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION,
  RPCGRPCSTATUSCODEVALUES_INTERNAL,
  RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT,
  RPCGRPCSTATUSCODEVALUES_NOT_FOUND,
  RPCGRPCSTATUSCODEVALUES_OK,
  RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE,
  RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED,
  RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED,
  RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED,
  RPCGRPCSTATUSCODEVALUES_UNAVAILABLE,
  RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED,
  RPCGRPCSTATUSCODEVALUES_UNKNOWN,
  RpcGrpcStatusCodeValues,
  SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET,
  SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS,
  SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ,
  SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY,
  SEMATTRS_AWS_DYNAMODB_COUNT,
  SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE,
  SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES,
  SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES,
  SEMATTRS_AWS_DYNAMODB_INDEX_NAME,
  SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS,
  SEMATTRS_AWS_DYNAMODB_LIMIT,
  SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES,
  SEMATTRS_AWS_DYNAMODB_PROJECTION,
  SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY,
  SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY,
  SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT,
  SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD,
  SEMATTRS_AWS_DYNAMODB_SEGMENT,
  SEMATTRS_AWS_DYNAMODB_SELECT,
  SEMATTRS_AWS_DYNAMODB_TABLE_COUNT,
  SEMATTRS_AWS_DYNAMODB_TABLE_NAMES,
  SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS,
  SEMATTRS_AWS_LAMBDA_INVOKED_ARN,
  SEMATTRS_CODE_FILEPATH,
  SEMATTRS_CODE_FUNCTION,
  SEMATTRS_CODE_LINENO,
  SEMATTRS_CODE_NAMESPACE,
  SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL,
  SEMATTRS_DB_CASSANDRA_COORDINATOR_DC,
  SEMATTRS_DB_CASSANDRA_COORDINATOR_ID,
  SEMATTRS_DB_CASSANDRA_IDEMPOTENCE,
  SEMATTRS_DB_CASSANDRA_KEYSPACE,
  SEMATTRS_DB_CASSANDRA_PAGE_SIZE,
  SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT,
  SEMATTRS_DB_CASSANDRA_TABLE,
  SEMATTRS_DB_CONNECTION_STRING,
  SEMATTRS_DB_HBASE_NAMESPACE,
  SEMATTRS_DB_JDBC_DRIVER_CLASSNAME,
  SEMATTRS_DB_MONGODB_COLLECTION,
  SEMATTRS_DB_MSSQL_INSTANCE_NAME,
  SEMATTRS_DB_NAME,
  SEMATTRS_DB_OPERATION,
  SEMATTRS_DB_REDIS_DATABASE_INDEX,
  SEMATTRS_DB_SQL_TABLE,
  SEMATTRS_DB_STATEMENT,
  SEMATTRS_DB_SYSTEM,
  SEMATTRS_DB_USER,
  SEMATTRS_ENDUSER_ID,
  SEMATTRS_ENDUSER_ROLE,
  SEMATTRS_ENDUSER_SCOPE,
  SEMATTRS_EXCEPTION_ESCAPED,
  SEMATTRS_EXCEPTION_MESSAGE,
  SEMATTRS_EXCEPTION_STACKTRACE,
  SEMATTRS_EXCEPTION_TYPE,
  SEMATTRS_FAAS_COLDSTART,
  SEMATTRS_FAAS_CRON,
  SEMATTRS_FAAS_DOCUMENT_COLLECTION,
  SEMATTRS_FAAS_DOCUMENT_NAME,
  SEMATTRS_FAAS_DOCUMENT_OPERATION,
  SEMATTRS_FAAS_DOCUMENT_TIME,
  SEMATTRS_FAAS_EXECUTION,
  SEMATTRS_FAAS_INVOKED_NAME,
  SEMATTRS_FAAS_INVOKED_PROVIDER,
  SEMATTRS_FAAS_INVOKED_REGION,
  SEMATTRS_FAAS_TIME,
  SEMATTRS_FAAS_TRIGGER,
  SEMATTRS_HTTP_CLIENT_IP,
  SEMATTRS_HTTP_FLAVOR,
  SEMATTRS_HTTP_HOST,
  SEMATTRS_HTTP_METHOD,
  SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH,
  SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED,
  SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH,
  SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED,
  SEMATTRS_HTTP_ROUTE,
  SEMATTRS_HTTP_SCHEME,
  SEMATTRS_HTTP_SERVER_NAME,
  SEMATTRS_HTTP_STATUS_CODE,
  SEMATTRS_HTTP_TARGET,
  SEMATTRS_HTTP_URL,
  SEMATTRS_HTTP_USER_AGENT,
  SEMATTRS_MESSAGE_COMPRESSED_SIZE,
  SEMATTRS_MESSAGE_ID,
  SEMATTRS_MESSAGE_TYPE,
  SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE,
  SEMATTRS_MESSAGING_CONSUMER_ID,
  SEMATTRS_MESSAGING_CONVERSATION_ID,
  SEMATTRS_MESSAGING_DESTINATION,
  SEMATTRS_MESSAGING_DESTINATION_KIND,
  SEMATTRS_MESSAGING_KAFKA_CLIENT_ID,
  SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP,
  SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY,
  SEMATTRS_MESSAGING_KAFKA_PARTITION,
  SEMATTRS_MESSAGING_KAFKA_TOMBSTONE,
  SEMATTRS_MESSAGING_MESSAGE_ID,
  SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES,
  SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES,
  SEMATTRS_MESSAGING_OPERATION,
  SEMATTRS_MESSAGING_PROTOCOL,
  SEMATTRS_MESSAGING_PROTOCOL_VERSION,
  SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY,
  SEMATTRS_MESSAGING_SYSTEM,
  SEMATTRS_MESSAGING_TEMP_DESTINATION,
  SEMATTRS_MESSAGING_URL,
  SEMATTRS_NET_HOST_CARRIER_ICC,
  SEMATTRS_NET_HOST_CARRIER_MCC,
  SEMATTRS_NET_HOST_CARRIER_MNC,
  SEMATTRS_NET_HOST_CARRIER_NAME,
  SEMATTRS_NET_HOST_CONNECTION_SUBTYPE,
  SEMATTRS_NET_HOST_CONNECTION_TYPE,
  SEMATTRS_NET_HOST_IP,
  SEMATTRS_NET_HOST_NAME,
  SEMATTRS_NET_HOST_PORT,
  SEMATTRS_NET_PEER_IP,
  SEMATTRS_NET_PEER_NAME,
  SEMATTRS_NET_PEER_PORT,
  SEMATTRS_NET_TRANSPORT,
  SEMATTRS_PEER_SERVICE,
  SEMATTRS_RPC_GRPC_STATUS_CODE,
  SEMATTRS_RPC_JSONRPC_ERROR_CODE,
  SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE,
  SEMATTRS_RPC_JSONRPC_REQUEST_ID,
  SEMATTRS_RPC_JSONRPC_VERSION,
  SEMATTRS_RPC_METHOD,
  SEMATTRS_RPC_SERVICE,
  SEMATTRS_RPC_SYSTEM,
  SEMATTRS_THREAD_ID,
  SEMATTRS_THREAD_NAME,
  SEMRESATTRS_AWS_ECS_CLUSTER_ARN,
  SEMRESATTRS_AWS_ECS_CONTAINER_ARN,
  SEMRESATTRS_AWS_ECS_LAUNCHTYPE,
  SEMRESATTRS_AWS_ECS_TASK_ARN,
  SEMRESATTRS_AWS_ECS_TASK_FAMILY,
  SEMRESATTRS_AWS_ECS_TASK_REVISION,
  SEMRESATTRS_AWS_EKS_CLUSTER_ARN,
  SEMRESATTRS_AWS_LOG_GROUP_ARNS,
  SEMRESATTRS_AWS_LOG_GROUP_NAMES,
  SEMRESATTRS_AWS_LOG_STREAM_ARNS,
  SEMRESATTRS_AWS_LOG_STREAM_NAMES,
  SEMRESATTRS_CLOUD_ACCOUNT_ID,
  SEMRESATTRS_CLOUD_AVAILABILITY_ZONE,
  SEMRESATTRS_CLOUD_PLATFORM,
  SEMRESATTRS_CLOUD_PROVIDER,
  SEMRESATTRS_CLOUD_REGION,
  SEMRESATTRS_CONTAINER_ID,
  SEMRESATTRS_CONTAINER_IMAGE_NAME,
  SEMRESATTRS_CONTAINER_IMAGE_TAG,
  SEMRESATTRS_CONTAINER_NAME,
  SEMRESATTRS_CONTAINER_RUNTIME,
  SEMRESATTRS_DEPLOYMENT_ENVIRONMENT,
  SEMRESATTRS_DEVICE_ID,
  SEMRESATTRS_DEVICE_MODEL_IDENTIFIER,
  SEMRESATTRS_DEVICE_MODEL_NAME,
  SEMRESATTRS_FAAS_ID,
  SEMRESATTRS_FAAS_INSTANCE,
  SEMRESATTRS_FAAS_MAX_MEMORY,
  SEMRESATTRS_FAAS_NAME,
  SEMRESATTRS_FAAS_VERSION,
  SEMRESATTRS_HOST_ARCH,
  SEMRESATTRS_HOST_ID,
  SEMRESATTRS_HOST_IMAGE_ID,
  SEMRESATTRS_HOST_IMAGE_NAME,
  SEMRESATTRS_HOST_IMAGE_VERSION,
  SEMRESATTRS_HOST_NAME,
  SEMRESATTRS_HOST_TYPE,
  SEMRESATTRS_K8S_CLUSTER_NAME,
  SEMRESATTRS_K8S_CONTAINER_NAME,
  SEMRESATTRS_K8S_CRONJOB_NAME,
  SEMRESATTRS_K8S_CRONJOB_UID,
  SEMRESATTRS_K8S_DAEMONSET_NAME,
  SEMRESATTRS_K8S_DAEMONSET_UID,
  SEMRESATTRS_K8S_DEPLOYMENT_NAME,
  SEMRESATTRS_K8S_DEPLOYMENT_UID,
  SEMRESATTRS_K8S_JOB_NAME,
  SEMRESATTRS_K8S_JOB_UID,
  SEMRESATTRS_K8S_NAMESPACE_NAME,
  SEMRESATTRS_K8S_NODE_NAME,
  SEMRESATTRS_K8S_NODE_UID,
  SEMRESATTRS_K8S_POD_NAME,
  SEMRESATTRS_K8S_POD_UID,
  SEMRESATTRS_K8S_REPLICASET_NAME,
  SEMRESATTRS_K8S_REPLICASET_UID,
  SEMRESATTRS_K8S_STATEFULSET_NAME,
  SEMRESATTRS_K8S_STATEFULSET_UID,
  SEMRESATTRS_OS_DESCRIPTION,
  SEMRESATTRS_OS_NAME,
  SEMRESATTRS_OS_TYPE,
  SEMRESATTRS_OS_VERSION,
  SEMRESATTRS_PROCESS_COMMAND,
  SEMRESATTRS_PROCESS_COMMAND_ARGS,
  SEMRESATTRS_PROCESS_COMMAND_LINE,
  SEMRESATTRS_PROCESS_EXECUTABLE_NAME,
  SEMRESATTRS_PROCESS_EXECUTABLE_PATH,
  SEMRESATTRS_PROCESS_OWNER,
  SEMRESATTRS_PROCESS_PID,
  SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION,
  SEMRESATTRS_PROCESS_RUNTIME_NAME,
  SEMRESATTRS_PROCESS_RUNTIME_VERSION,
  SEMRESATTRS_SERVICE_INSTANCE_ID,
  SEMRESATTRS_SERVICE_NAME,
  SEMRESATTRS_SERVICE_NAMESPACE,
  SEMRESATTRS_SERVICE_VERSION,
  SEMRESATTRS_TELEMETRY_AUTO_VERSION,
  SEMRESATTRS_TELEMETRY_SDK_LANGUAGE,
  SEMRESATTRS_TELEMETRY_SDK_NAME,
  SEMRESATTRS_TELEMETRY_SDK_VERSION,
  SEMRESATTRS_WEBENGINE_DESCRIPTION,
  SEMRESATTRS_WEBENGINE_NAME,
  SEMRESATTRS_WEBENGINE_VERSION,
  SIGNALR_CONNECTION_STATUS_VALUE_APP_SHUTDOWN,
  SIGNALR_CONNECTION_STATUS_VALUE_NORMAL_CLOSURE,
  SIGNALR_CONNECTION_STATUS_VALUE_TIMEOUT,
  SIGNALR_TRANSPORT_VALUE_LONG_POLLING,
  SIGNALR_TRANSPORT_VALUE_SERVER_SENT_EVENTS,
  SIGNALR_TRANSPORT_VALUE_WEB_SOCKETS,
  SemanticAttributes,
  SemanticResourceAttributes,
  TELEMETRYSDKLANGUAGEVALUES_CPP,
  TELEMETRYSDKLANGUAGEVALUES_DOTNET,
  TELEMETRYSDKLANGUAGEVALUES_ERLANG,
  TELEMETRYSDKLANGUAGEVALUES_GO,
  TELEMETRYSDKLANGUAGEVALUES_JAVA,
  TELEMETRYSDKLANGUAGEVALUES_NODEJS,
  TELEMETRYSDKLANGUAGEVALUES_PHP,
  TELEMETRYSDKLANGUAGEVALUES_PYTHON,
  TELEMETRYSDKLANGUAGEVALUES_RUBY,
  TELEMETRYSDKLANGUAGEVALUES_WEBJS,
  TELEMETRY_SDK_LANGUAGE_VALUE_CPP,
  TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET,
  TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG,
  TELEMETRY_SDK_LANGUAGE_VALUE_GO,
  TELEMETRY_SDK_LANGUAGE_VALUE_JAVA,
  TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS,
  TELEMETRY_SDK_LANGUAGE_VALUE_PHP,
  TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON,
  TELEMETRY_SDK_LANGUAGE_VALUE_RUBY,
  TELEMETRY_SDK_LANGUAGE_VALUE_RUST,
  TELEMETRY_SDK_LANGUAGE_VALUE_SWIFT,
  TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS,
  TelemetrySdkLanguageValues
}, Symbol.toStringTag, { value: "Module" }));
const require$$1 = /* @__PURE__ */ getAugmentedNamespace(esm);
var build = {};
var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(build, "__esModule", { value: true });
var FetchInstrumentation_1 = build.FetchInstrumentation = void 0;
const node_diagnostics_channel_1 = __importDefault(require$$0);
const semantic_conventions_1 = require$$1;
const api_1 = require$$2;
function getMessage(error) {
  if (error instanceof AggregateError) {
    return error.errors.map((e) => e.message).join(", ");
  }
  return error.message;
}
function contentLengthFromResponseHeaders(headers) {
  const name = "content-length";
  for (let i = 0; i < headers.length; i += 2) {
    const k = headers[i];
    if (k.length === name.length && k.toString().toLowerCase() === name) {
      const v = Number(headers[i + 1]);
      if (!Number.isNaN(Number(v))) {
        return v;
      }
      return void 0;
    }
  }
  return void 0;
}
async function loadFetch() {
  try {
    await fetch("");
  } catch (_) {
  }
}
class FetchInstrumentation {
  // Keep ref to avoid https://github.com/nodejs/node/issues/42170 bug and for
  // unsubscribing.
  channelSubs;
  spanFromReq = /* @__PURE__ */ new WeakMap();
  tracer;
  config;
  meter;
  instrumentationName = "opentelemetry-instrumentation-node-18-fetch";
  instrumentationVersion = "1.0.0";
  instrumentationDescription = "Instrumentation for Node 18 fetch via diagnostics_channel";
  subscribeToChannel(diagnosticChannel, onMessage) {
    const channel = node_diagnostics_channel_1.default.channel(diagnosticChannel);
    channel.subscribe(onMessage);
    this.channelSubs.push({
      name: diagnosticChannel,
      channel,
      onMessage
    });
  }
  constructor(config) {
    loadFetch();
    this.channelSubs = [];
    this.meter = api_1.metrics.getMeter(this.instrumentationName, this.instrumentationVersion);
    this.tracer = api_1.trace.getTracer(this.instrumentationName, this.instrumentationVersion);
    this.config = { ...config };
  }
  disable() {
    this.channelSubs?.forEach((sub) => sub.channel.unsubscribe(sub.onMessage));
  }
  enable() {
    this.subscribeToChannel("undici:request:create", (args) => this.onRequest(args));
    this.subscribeToChannel("undici:request:headers", (args) => this.onHeaders(args));
    this.subscribeToChannel("undici:request:trailers", (args) => this.onDone(args));
    this.subscribeToChannel("undici:request:error", (args) => this.onError(args));
  }
  setTracerProvider(tracerProvider) {
    this.tracer = tracerProvider.getTracer(this.instrumentationName, this.instrumentationVersion);
  }
  setMeterProvider(meterProvider) {
    this.meter = meterProvider.getMeter(this.instrumentationName, this.instrumentationVersion);
  }
  setConfig(config) {
    this.config = { ...config };
  }
  getConfig() {
    return this.config;
  }
  onRequest({ request }) {
    if (request.method === "CONNECT") {
      return;
    }
    if (this.config.ignoreRequestHook && this.config.ignoreRequestHook(request) === true) {
      return;
    }
    const span = this.tracer.startSpan(`HTTP ${request.method}`, {
      kind: api_1.SpanKind.CLIENT,
      attributes: {
        [semantic_conventions_1.SemanticAttributes.HTTP_URL]: getAbsoluteUrl(request.origin, request.path),
        [semantic_conventions_1.SemanticAttributes.HTTP_METHOD]: request.method,
        [semantic_conventions_1.SemanticAttributes.HTTP_TARGET]: request.path,
        "http.client": "fetch"
      }
    });
    const requestContext = api_1.trace.setSpan(api_1.context.active(), span);
    const addedHeaders = {};
    api_1.propagation.inject(requestContext, addedHeaders);
    if (this.config.onRequest) {
      this.config.onRequest({ request, span, additionalHeaders: addedHeaders });
    }
    if (Array.isArray(request.headers)) {
      request.headers.push(...Object.entries(addedHeaders).flat());
    } else {
      request.headers += Object.entries(addedHeaders).map(([k, v]) => `${k}: ${v}\r
`).join("");
    }
    this.spanFromReq.set(request, span);
  }
  onHeaders({ request, response }) {
    const span = this.spanFromReq.get(request);
    if (span !== void 0) {
      const cLen = contentLengthFromResponseHeaders(response.headers);
      const attrs = {
        [semantic_conventions_1.SemanticAttributes.HTTP_STATUS_CODE]: response.statusCode
      };
      if (cLen) {
        attrs[semantic_conventions_1.SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH] = cLen;
      }
      span.setAttributes(attrs);
      span.setStatus({
        code: response.statusCode >= 400 ? api_1.SpanStatusCode.ERROR : api_1.SpanStatusCode.OK,
        message: String(response.statusCode)
      });
    }
  }
  onDone({ request }) {
    const span = this.spanFromReq.get(request);
    if (span !== void 0) {
      span.end();
      this.spanFromReq.delete(request);
    }
  }
  onError({ request, error }) {
    const span = this.spanFromReq.get(request);
    if (span !== void 0) {
      span.recordException(error);
      span.setStatus({
        code: api_1.SpanStatusCode.ERROR,
        message: getMessage(error)
      });
      span.end();
    }
  }
}
FetchInstrumentation_1 = build.FetchInstrumentation = FetchInstrumentation;
function getAbsoluteUrl(origin, path = "/") {
  const url = `${origin}`;
  if (origin.endsWith("/") && path.startsWith("/")) {
    return `${url}${path.slice(1)}`;
  }
  if (!origin.endsWith("/") && !path.startsWith("/")) {
    return `${url}/${path.slice(1)}`;
  }
  return `${url}${path}`;
}
const index = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  get FetchInstrumentation() {
    return FetchInstrumentation_1;
  },
  default: build
}, [build]);
export {
  index as i
};
